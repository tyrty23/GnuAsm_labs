.section .data
fmt_int: .string "%hd\n"         # Формат для вывода 16-битного целого числа
fmt_long: .string "%d\n"         # Формат для вывода 32-битного целого числа
fmt_llong: .string "%ld\n"       # Формат для вывода 64-битного целого числа
fmt_float: .string "%f\n"        # Формат для вывода 32-битного числа с плавающей запятой
fmt_double: .string "%lf\n"      # Формат для вывода 64-битного числа с плавающей запятой

.section .bss
var_int: .space 2                # 16-битное целое число
var_long: .space 4               # 32-битное целое число
var_llong: .space 8              # 64-битное целое число
var_float: .space 4              # 32-битное число с плавающей запятой
var_double: .space 8             # 64-битное число с плавающей запятой

.section .text
.global main
.extern scanf, printf

main:
    # Ввод значений
    pushq %rbp                  # Сохраняем текущее значение RBP на стеке
    movq %rsp, %rbp             # Инициализируем RBP

    subq $40, %rsp              # Резервируем место на стеке для переменных

    leaq var_int(%rbp), %rdi    # Загрузка адреса переменной для 16-битного целого числа
    movq $fmt_int, %rsi         # Загрузка адреса формата для 16-битного целого числа
    call scanf                  # Вызов scanf для ввода 16-битного целого числа

    leaq var_long(%rbp), %rdi   # Загрузка адреса переменной для 32-битного целого числа
    movq $fmt_long, %rsi        # Загрузка адреса формата для 32-битного целого числа
    call scanf                  # Вызов scanf для ввода 32-битного целого числа

    leaq var_llong(%rbp), %rdi  # Загрузка адреса переменной для 64-битного целого числа
    movq $fmt_llong, %rsi       # Загрузка адреса формата для 64-битного целого числа
    call scanf                  # Вызов scanf для ввода 64-битного целого числа

    leaq var_float(%rbp), %rdi  # Загрузка адреса переменной для 32-битного числа с плавающей запятой
    movq $fmt_float, %rsi       # Загрузка адреса формата для 32-битного числа с плавающей запятой
    call scanf                  # Вызов scanf для ввода 32-битного числа с плавающей запятой

    leaq var_double(%rbp), %rdi # Загрузка адреса переменной для 64-битного числа с плавающей запятой
    movq $fmt_double, %rsi      # Загрузка адреса формата для 64-битного числа с плавающей запятой
    call scanf                  # Вызов scanf для ввода 64-битного числа с плавающей запятой

    # Вывод значений
    movq $fmt_int, %rdi         # Загрузка адреса формата для 16-битного целого числа
    movq var_int(%rbp), %rsi    # Загрузка значения переменной для 16-битного целого числа
    call printf                 # Вызов printf для вывода 16-битного целого числа

    movq $fmt_long, %rdi        # Загрузка адреса формата для 32-битного целого числа
    movl var_long(%rbp), %esi   # Загрузка значения переменной для 32-битного целого числа
    call printf                 # Вызов printf для вывода 32-битного целого числа

    movq $fmt_llong, %rdi       # Загрузка адреса формата для 64-битного целого числа
    movq var_llong(%rbp), %rsi  # Загрузка значения переменной для 64-битного целого числа
    call printf                 # Вызов printf для вывода 64-битного целого числа

    movq $fmt_float, %rdi       # Загрузка адреса формата для 32-битного числа с плавающей запятой
    movss var_float(%rbp), %xmm0 # Загрузка значения переменной для 32-битного числа с плавающей запятой
    call printf                 # Вызов printf для вывода 32-битного числа с плавающей запятой

    movq $fmt_double, %rdi      # Загрузка адреса формата для 64-битного числа с плавающей запятой
    movsd var_double(%rbp), %xmm0# Загрузка значения переменной для 64-битного числа с плавающей запятой
    call printf                 # Вызов printf для вывода 64-битного числа с плавающей запятой

    # Освобождение выделенной памяти и возврат из программы
    addq $40, %rsp              # Освобождаем выделенное место на стеке
    popq %rbp                   # Восстанавливаем предыдущее значение RBP
    ret                          # Возврат из функции main
